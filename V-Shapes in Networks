{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "private_outputs": true,
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tMaLZV_Xbepz"
      },
      "source": [
        "# Colaboratory Assignment 7.2\n",
        "\n",
        "**Instructions**. Below you will find several text cells with programming (short) problems. You can create how many code cells you need to answer them.\n",
        "\n",
        "There are four problems, but you will only need to solve two. You **must** choose at least one of the problems with the title in <font color='#006633'>green</font>.\n",
        "\n",
        "\n",
        "**BEFORE YOU START**\n",
        "\n",
        "Make sure to run the code cell below, to fix the adjacency matrix problem. Also, remember that the next code cell should be the first thing you evaluate. Otherwise, you will to restart your runtime and reimport `networkx`"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip uninstall -q --yes scipy networkx && pip install -q scipy==1.8 networkx==2.7"
      ],
      "metadata": {
        "id": "v-i7_lggp7kf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b2KFk1dJXhDb"
      },
      "source": [
        "## 1. Identifying v-shapes\n",
        "\n",
        "There is a distinction between counting the v-shapes that have node $h$ as its vertex and checking if nodes $i, h, q$ are a v-shape motif. In this problem, use the IMDB data to print all v-shapes with `Martin Scorsese` as the vertex and `Robert De Niro` as one of the nodes. You can print a 3-element tuple with the nodes involved in the v-shape"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SVtOLNTwXhgL"
      },
      "source": [
        "import networkx as nx\n",
        "from Readlist import readlist\n",
        "\n",
        "\n",
        "def vCheck(G, vertex, end1):\n",
        "  v_shapes = []\n",
        "  nodes = list(G.nodes())\n",
        "  for i in nodes:\n",
        "    if G.has_edge(vertex, end1) and G.has_edge(vertex, i):\n",
        "      v_shapes.append((end1, vertex, i))\n",
        "    else:\n",
        "      continue\n",
        "  return v_shapes\n",
        "\n",
        "\n",
        "G = readlist('imdb.pkl', 0)\n",
        "v = vCheck(G, 'Martin Scorsese', 'Robert De Niro')\n",
        "print(v)\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NyaOjlZhXm8B"
      },
      "source": [
        "##<font color='#006633'>2. Counting v-shapes inefficiently</font>\n",
        "\n",
        "Even though we have defined a function to count how many v-shapes every node is the vertex to,  we can also accomplish this by using the `vCheck` function. Ideally, we should use the IMDB data for this problem, but this is not feasible given the number of pairs we could identify in this network. Potentially, there are 218133097260 pairs of nodes, which makes the search too extensive in terms of time of execution.\n",
        "\n",
        "We will use the airports network for this problem.\n",
        "\n",
        "Count the v-shapes in which `ATL` is the vertex, using only the `vCheck` function. Compare that result with the one obtained using the `vi` function, defined in the slides and the videos for this lesson."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fMB8q2LxXoR8"
      },
      "source": [
        "def vCheck(G, vertex):\n",
        "  neighs = list(nx.neighbors(G, vertex))\n",
        "  count = 0\n",
        "  for i in range(len(neighs)):\n",
        "    for j in range(1, len(neighs)):\n",
        "      if G.has_edge(vertex, neighs[i]) and G.has_edge(vertex, neighs[j]):\n",
        "        count += 1\n",
        "      else:\n",
        "        continue\n",
        "  return count / 2\n",
        "\n",
        "def vi(G, i):\n",
        "    k = G.degree(i)\n",
        "    return (k * (k - 1))/2\n",
        "\n",
        "G2 = readlist('Airports.txt', 0) # network\n",
        "\n",
        "v = vCheck(G2, 'ATL') # modified v-shape check\n",
        "v2 = vi(G2, 'ATL') # instructor v-shape check\n",
        "\n",
        "print('Using the modified vCheck function, the number of v-shapes calculated was: ', v)\n",
        "print('Using the instructors vi function, the number of v-shapes calculated was: ', v2)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wkYxdSJ8Xtju"
      },
      "source": [
        "## <font color='#006633'>3. How slow is using `vCheck` compared to `vi`?</font>\n",
        "\n",
        "Let's time both methods for counting v-shapes. A useful piece of information is to have the count of v-shapes for **multiple** nodes in a network. To save this, we can create a dictionary `vAir` with the node labels as the keys, and the number of v-shapes with the node as vertex as the values.\n",
        "\n",
        "Use the airports dataset, but considering (from the previous problem) that each call to the function `vCheck` for this network takes $\\approx$ 3 seconds; let's use the last 50 nodes in the node set. Time how long it takes to obtain the dictionary `vAir` using the functions `vCheck()` and `vi()`.\n",
        "\n",
        "To take the time used to obtain this dictionary using both methods, import the `time` module and use the function `time` like this\n",
        "\n",
        "```python\n",
        "import time\n",
        "\n",
        "t0 = time.time()\n",
        "##put some code here\n",
        "tf = time.time()\n",
        "print('Executed in ', tf - t0}')\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gQO1YmAtXurl"
      },
      "source": [],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TiheESquX0sQ"
      },
      "source": [
        "## 4. Creating histograms\n",
        "\n",
        "Just as with triangles, it is possible to create a v-shape histogram for a network. This is a count for the frequencies of the number of v-shapes every node is the vertex to.\n",
        "\n",
        "Go back to the IMDB network and obtain vIMDB, a dictionary of the v-shapes for each node (use the `vi()` function). Then, create a histogram `Hv` and plot it, using the method you think it's optimal in terms of visualization (e.g. bars, dots, linear or log scales, etc)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WXBN4a2EX6cY"
      },
      "source": [],
      "execution_count": null,
      "outputs": []
    }
  ]
}